{-# LANGUAGE BangPatterns, DeriveDataTypeable, FlexibleInstances, MultiParamTypeClasses #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
module Database.Hbx.Proto.Expect (protoInfo, fileDescriptorProto) where
import Prelude ((+), (/))
import qualified Prelude as Prelude'
import qualified Data.Typeable as Prelude'
import qualified Data.Data as Prelude'
import qualified Text.ProtocolBuffers.Header as P'
import Text.DescriptorProtos.FileDescriptorProto (FileDescriptorProto)
import Text.ProtocolBuffers.Reflections (ProtoInfo)
import qualified Text.ProtocolBuffers.WireMessage as P' (wireGet,getFromBS)
 
protoInfo :: ProtoInfo
protoInfo
 = Prelude'.read
    "ProtoInfo {protoMod = ProtoName {protobufName = FIName \".Mysqlx.Expect\", haskellPrefix = [], parentModule = [MName \"Database\",MName \"Hbx\",MName \"Proto\"], baseName = MName \"Expect\"}, protoFilePath = [\"Database\",\"Hbx\",\"Proto\",\"Expect.hs\"], protoSource = \"src/mysqlx_expect.proto\", extensionKeys = fromList [], messages = [DescriptorInfo {descName = ProtoName {protobufName = FIName \".Mysqlx.Expect.Open\", haskellPrefix = [], parentModule = [MName \"Database\",MName \"Hbx\",MName \"Proto\",MName \"Expect\"], baseName = MName \"Open\"}, descFilePath = [\"Database\",\"Hbx\",\"Proto\",\"Expect\",\"Open.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Mysqlx.Expect.Open.op\", haskellPrefix' = [], parentModule' = [MName \"Database\",MName \"Hbx\",MName \"Proto\",MName \"Expect\",MName \"Open\"], baseName' = FName \"op\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".Mysqlx.Expect.Open.CtxOperation\", haskellPrefix = [], parentModule = [MName \"Database\",MName \"Hbx\",MName \"Proto\",MName \"Expect\",MName \"Open\"], baseName = MName \"CtxOperation\"}), hsRawDefault = Just \"EXPECT_CTX_COPY_PREV\", hsDefault = Just (HsDef'Enum \"EXPECT_CTX_COPY_PREV\")},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Mysqlx.Expect.Open.cond\", haskellPrefix' = [], parentModule' = [MName \"Database\",MName \"Hbx\",MName \"Proto\",MName \"Expect\",MName \"Open\"], baseName' = FName \"cond\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = True, mightPack = False, typeCode = FieldType {getFieldType = 11}, typeName = Just (ProtoName {protobufName = FIName \".Mysqlx.Expect.Open.Condition\", haskellPrefix = [], parentModule = [MName \"Database\",MName \"Hbx\",MName \"Proto\",MName \"Expect\",MName \"Open\"], baseName = MName \"Condition\"}), hsRawDefault = Nothing, hsDefault = Nothing}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Mysqlx.Expect.Open.Condition\", haskellPrefix = [], parentModule = [MName \"Database\",MName \"Hbx\",MName \"Proto\",MName \"Expect\",MName \"Open\"], baseName = MName \"Condition\"}, descFilePath = [\"Database\",\"Hbx\",\"Proto\",\"Expect\",\"Open\",\"Condition.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Mysqlx.Expect.Open.Condition.condition_key\", haskellPrefix' = [], parentModule' = [MName \"Database\",MName \"Hbx\",MName \"Proto\",MName \"Expect\",MName \"Open\",MName \"Condition\"], baseName' = FName \"condition_key\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 13}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Mysqlx.Expect.Open.Condition.condition_value\", haskellPrefix' = [], parentModule' = [MName \"Database\",MName \"Hbx\",MName \"Proto\",MName \"Expect\",MName \"Open\",MName \"Condition\"], baseName' = FName \"condition_value\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 12}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Mysqlx.Expect.Open.Condition.op\", haskellPrefix' = [], parentModule' = [MName \"Database\",MName \"Hbx\",MName \"Proto\",MName \"Expect\",MName \"Open\",MName \"Condition\"], baseName' = FName \"op\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 24}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".Mysqlx.Expect.Open.Condition.ConditionOperation\", haskellPrefix = [], parentModule = [MName \"Database\",MName \"Hbx\",MName \"Proto\",MName \"Expect\",MName \"Open\",MName \"Condition\"], baseName = MName \"ConditionOperation\"}), hsRawDefault = Just \"EXPECT_OP_SET\", hsDefault = Just (HsDef'Enum \"EXPECT_OP_SET\")}], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Mysqlx.Expect.Close\", haskellPrefix = [], parentModule = [MName \"Database\",MName \"Hbx\",MName \"Proto\",MName \"Expect\"], baseName = MName \"Close\"}, descFilePath = [\"Database\",\"Hbx\",\"Proto\",\"Expect\",\"Close.hs\"], isGroup = False, fields = fromList [], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False}], enums = [EnumInfo {enumName = ProtoName {protobufName = FIName \".Mysqlx.Expect.Open.CtxOperation\", haskellPrefix = [], parentModule = [MName \"Database\",MName \"Hbx\",MName \"Proto\",MName \"Expect\",MName \"Open\"], baseName = MName \"CtxOperation\"}, enumFilePath = [\"Database\",\"Hbx\",\"Proto\",\"Expect\",\"Open\",\"CtxOperation.hs\"], enumValues = [(EnumCode {getEnumCode = 0},\"EXPECT_CTX_COPY_PREV\"),(EnumCode {getEnumCode = 1},\"EXPECT_CTX_EMPTY\")]},EnumInfo {enumName = ProtoName {protobufName = FIName \".Mysqlx.Expect.Open.Condition.ConditionOperation\", haskellPrefix = [], parentModule = [MName \"Database\",MName \"Hbx\",MName \"Proto\",MName \"Expect\",MName \"Open\",MName \"Condition\"], baseName = MName \"ConditionOperation\"}, enumFilePath = [\"Database\",\"Hbx\",\"Proto\",\"Expect\",\"Open\",\"Condition\",\"ConditionOperation.hs\"], enumValues = [(EnumCode {getEnumCode = 0},\"EXPECT_OP_SET\"),(EnumCode {getEnumCode = 1},\"EXPECT_OP_UNSET\")]}], knownKeyMap = fromList []}"
 
fileDescriptorProto :: FileDescriptorProto
fileDescriptorProto
 = P'.getFromBS (P'.wireGet 11)
    (P'.pack
      "\225\ETX\n\ETBsrc/mysqlx_expect.proto\DC2\rMysqlx.Expect\"\128\ETX\n\EOTOpen\DC2B\n\STXop\CAN\SOH \SOH(\SO2 .Mysqlx.Expect.Open.CtxOperation:\DC4EXPECT_CTX_COPY_PREV\DC2+\n\EOTcond\CAN\STX \ETX(\v2\GS.Mysqlx.Expect.Open.Condition\SUB\198\SOH\n\tCondition\DC2\NAK\n\rcondition_key\CAN\SOH \STX(\r\DC2\ETB\n\SIcondition_value\CAN\STX \SOH(\f\DC2K\n\STXop\CAN\ETX \SOH(\SO20.Mysqlx.Expect.Open.Condition.ConditionOperation:\rEXPECT_OP_SET\"<\n\DC2ConditionOperation\DC2\DC1\n\rEXPECT_OP_SET\DLE\NUL\DC2\DC3\n\SIEXPECT_OP_UNSET\DLE\SOH\">\n\fCtxOperation\DC2\CAN\n\DC4EXPECT_CTX_COPY_PREV\DLE\NUL\DC2\DC4\n\DLEEXPECT_CTX_EMPTY\DLE\SOH\"\a\n\ENQCloseB+\n\EMdatabase.hbx.proto.expectH\SOHP\NUL\128\SOH\NUL\136\SOH\NUL\144\SOH\NUL\160\SOH\NUL")