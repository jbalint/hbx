
// Messages to manage Sessions
//
// .. uml::
//
//   == session start ==
//   Client -> Server: AuthenticateStart
//   opt
//   Server --> Client: AuthenticateContinue
//   Client --> Server: AuthenticateContinue
//   end
//   alt
//   Server --> Client: AuthenticateOk
//   else
//   Server --> Client: Error
//   end
//   ...
//   == session reset ==
//   Client -> Server: Reset
//   Server --> Client: Ok
//   == session end ==
//   Client -> Server: Close
//   Server --> Client: Ok
//
package Mysqlx.Session;
option java_package = "database.hbx.proto.session";

// the initial message send from the client to the server to start the
// authentication proccess
//
// :param mech_name: authentication mechanism name
// :param auth_data: authentication data
// :param initial_response: initial response
// :Returns: :protobuf:msg:`Mysqlx.Session::AuthenticateContinue`
message AuthenticateStart {
  required string mech_name = 1;
  optional bytes auth_data = 2;
  optional bytes initial_response = 3;
}

// send by client or server after a :protobuf:msg:`Mysqlx.Session::AuthenticateStart` to
// exchange more auth data
//
// :param auth_data: authentication data
// :Returns: :protobuf:msg:`Mysqlx.Session::AuthenticateContinue`
message AuthenticateContinue {
  required bytes auth_data = 1;
}

// sent by the server after successful authentication
//
// :param auth_data: authentication data
message AuthenticateOk {
  optional bytes auth_data = 1;
}

// reset the current session
//
// :Returns: :protobuf:msg:`Mysqlx::Ok`
message Reset {
}

// close the current session
//
// :Returns: :protobuf:msg:`Mysqlx::Ok`
message Close {
}

